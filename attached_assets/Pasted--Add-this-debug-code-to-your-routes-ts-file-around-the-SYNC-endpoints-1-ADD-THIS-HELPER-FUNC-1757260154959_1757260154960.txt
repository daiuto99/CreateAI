
// Add this debug code to your routes.ts file around the SYNC endpoints

// 1. ADD THIS HELPER FUNCTION at the top of routes.ts (after imports)
async function debugAirtableIntegration(airtableIntegration: any) {
  console.log('\n🔍 === AIRTABLE DEBUG START ===');
  
  if (!airtableIntegration) {
    console.log('❌ No Airtable integration found');
    return null;
  }
  
  console.log('✅ Airtable Integration Status:', airtableIntegration.status);
  console.log('🔑 API Key exists:', !!airtableIntegration.apiKey);
  console.log('🏠 Base ID:', airtableIntegration.baseId);
  
  // Test basic connection
  try {
    const baseUrl = `https://api.airtable.com/v0/meta/bases/${airtableIntegration.baseId}`;
    console.log('🌐 Testing connection to:', baseUrl);
    
    const baseResponse = await fetch(baseUrl, {
      headers: {
        'Authorization': `Bearer ${airtableIntegration.apiKey}`,
        'User-Agent': 'LaunchBox-Debug/1.0'
      }
    });
    
    if (baseResponse.ok) {
      const baseData = await baseResponse.json();
      console.log('✅ Base connection successful');
      console.log('📋 Base name:', baseData.name);
      console.log('📊 Tables found:', baseData.tables?.map((t: any) => t.name) || 'none');
      
      // Check for required tables
      const tables = baseData.tables || [];
      const contactsTable = tables.find((t: any) => t.name === 'Contacts');
      const meetingsTable = tables.find((t: any) => t.name === 'Meetings');
      
      console.log('👥 Contacts table exists:', !!contactsTable);
      console.log('📅 Meetings table exists:', !!meetingsTable);
      
      if (contactsTable) {
        console.log('👥 Contacts table fields:', contactsTable.fields?.map((f: any) => f.name) || 'none');
      }
      
      if (meetingsTable) {
        console.log('📅 Meetings table fields:', meetingsTable.fields?.map((f: any) => f.name) || 'none');
      }
      
    } else {
      console.log('❌ Base connection failed:', baseResponse.status, baseResponse.statusText);
      const errorData = await baseResponse.text();
      console.log('❌ Error details:', errorData);
    }
  } catch (error) {
    console.log('❌ Base connection error:', error.message);
  }
  
  // Test Contacts table
  try {
    console.log('\n📋 Testing Contacts table...');
    const contactsUrl = `https://api.airtable.com/v0/${airtableIntegration.baseId}/Contacts?maxRecords=5`;
    
    const contactsResponse = await fetch(contactsUrl, {
      headers: {
        'Authorization': `Bearer ${airtableIntegration.apiKey}`,
        'User-Agent': 'LaunchBox-Debug/1.0'
      }
    });
    
    if (contactsResponse.ok) {
      const contactsData = await contactsResponse.json();
      console.log('✅ Contacts query successful');
      console.log('👥 Total contacts found:', contactsData.records?.length || 0);
      
      if (contactsData.records?.length > 0) {
        console.log('👤 Sample contact fields:', Object.keys(contactsData.records[0].fields || {}));
        console.log('👤 Sample contact data:', JSON.stringify(contactsData.records[0], null, 2));
      }
    } else {
      console.log('❌ Contacts query failed:', contactsResponse.status, contactsResponse.statusText);
      const errorData = await contactsResponse.text();
      console.log('❌ Contacts error details:', errorData);
    }
  } catch (error) {
    console.log('❌ Contacts query error:', error.message);
  }
  
  // Test Meetings table
  try {
    console.log('\n📅 Testing Meetings table...');
    const meetingsUrl = `https://api.airtable.com/v0/${airtableIntegration.baseId}/Meetings?maxRecords=5`;
    
    const meetingsResponse = await fetch(meetingsUrl, {
      headers: {
        'Authorization': `Bearer ${airtableIntegration.apiKey}`,
        'User-Agent': 'LaunchBox-Debug/1.0'
      }
    });
    
    if (meetingsResponse.ok) {
      const meetingsData = await meetingsResponse.json();
      console.log('✅ Meetings query successful');
      console.log('📅 Total meetings found:', meetingsData.records?.length || 0);
      
      if (meetingsData.records?.length > 0) {
        console.log('📝 Sample meeting fields:', Object.keys(meetingsData.records[0].fields || {}));
        meetingsData.records.forEach((meeting: any, index: number) => {
          console.log(`📝 Meeting ${index + 1}:`, {
            id: meeting.id,
            title: meeting.fields.Title || 'No title',
            status: meeting.fields['Processing Status'] || 'No status',
            created: meeting.fields.Created || meeting.createdTime,
            fields: Object.keys(meeting.fields)
          });
        });
      }
    } else {
      console.log('❌ Meetings query failed:', meetingsResponse.status, meetingsResponse.statusText);
      const errorData = await meetingsResponse.text();
      console.log('❌ Meetings error details:', errorData);
    }
  } catch (error) {
    console.log('❌ Meetings query error:', error.message);
  }
  
  // Test for meetings with specific status
  try {
    console.log('\n🔍 Testing for meetings with processing_status=complete...');
    const filterFormula = `{Processing Status} = 'complete'`;
    const filteredUrl = `https://api.airtable.com/v0/${airtableIntegration.baseId}/Meetings?filterByFormula=${encodeURIComponent(filterFormula)}`;
    
    const filteredResponse = await fetch(filteredUrl, {
      headers: {
        'Authorization': `Bearer ${airtableIntegration.apiKey}`,
        'User-Agent': 'LaunchBox-Debug/1.0'
      }
    });
    
    if (filteredResponse.ok) {
      const filteredData = await filteredResponse.json();
      console.log('✅ Filtered meetings query successful');
      console.log('📅 Meetings with status "complete":', filteredData.records?.length || 0);
      
      if (filteredData.records?.length > 0) {
        filteredData.records.forEach((meeting: any, index: number) => {
          console.log(`📝 Complete Meeting ${index + 1}:`, {
            id: meeting.id,
            title: meeting.fields.Title || 'No title',
            status: meeting.fields['Processing Status'],
            contact: meeting.fields.Contact || 'No contact linked',
            created: meeting.fields.Created || meeting.createdTime
          });
        });
      } else {
        console.log('⚠️ No meetings found with status "complete" - this is why SYNC page is empty');
        console.log('💡 Your manually added record might have a different status');
      }
    } else {
      console.log('❌ Filtered meetings query failed:', filteredResponse.status, filteredResponse.statusText);
    }
  } catch (error) {
    console.log('❌ Filtered meetings query error:', error.message);
  }
  
  console.log('🔍 === AIRTABLE DEBUG END ===\n');
  
  return airtableIntegration;
}

// 2. FIND THE SYNC ENDPOINT and ADD this debug call
// Look for the line that gets the Airtable integration, usually something like:
// const airtableIntegration = integrations.find(i => i.provider === 'airtable');

// REPLACE that section with:
const airtableIntegration = integrations.find(i => i.provider === 'airtable');

// ADD THIS LINE right after:
await debugAirtableIntegration(airtableIntegration);

// 3. ALSO ADD THIS DEBUG to the /api/sync/meetings endpoint specifically
// Find the endpoint that handles GET /api/sync/meetings and add this at the beginning:

console.log('\n🔍 === SYNC MEETINGS ENDPOINT DEBUG ===');
console.log('🎯 Endpoint called: GET /api/sync/meetings');
console.log('👤 User ID:', req.user?.id);
console.log('🏢 Org ID:', req.user?.orgId);

// Then add the debugAirtableIntegration call here too

// 4. ADD THIS ENVIRONMENT VARIABLE CHECK
console.log('\n🔍 === ENVIRONMENT DEBUG ===');
console.log('🌍 NODE_ENV:', process.env.NODE_ENV);
console.log('🔑 AIRTABLE_API_KEY exists:', !!process.env.AIRTABLE_API_KEY);
console.log('🏠 AIRTABLE_BASE_ID exists:', !!process.env.AIRTABLE_BASE_ID);
console.log('🏠 AIRTABLE_BASE_ID value:', process.env.AIRTABLE_BASE_ID?.substring(0, 8) + '...');

// 5. ADD THIS TO CHECK WHAT THE SYNC PAGE POLLING LOGIC IS DOING
// Find where the meetings are being fetched for the SYNC page and add:

console.log('\n🔍 === SYNC PAGE MEETING FETCH DEBUG ===');
console.log('🎯 Looking for meetings with status: complete');
console.log('📊 Query filters being applied:');
console.log('  - Processing Status = complete');
console.log('  - Created within last 30 days');
console.log('📋 Expected Airtable field names:');
console.log('  - Title (meeting title)');
console.log('  - Processing Status (should be "complete")');
console.log('  - Contact (linked to Contacts table)');
console.log('  - Created (creation timestamp)');