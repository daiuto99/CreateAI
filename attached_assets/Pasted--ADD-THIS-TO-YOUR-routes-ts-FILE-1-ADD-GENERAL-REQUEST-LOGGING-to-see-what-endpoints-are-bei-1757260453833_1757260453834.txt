
// ADD THIS TO YOUR routes.ts FILE

// 1. ADD GENERAL REQUEST LOGGING to see what endpoints are being called
app.use((req, res, next) => {
  if (req.path.includes('/api/sync') || req.path.includes('/api/otter') || req.path.includes('/api/airtable')) {
    console.log(`üåê ${req.method} ${req.path} - Called by SYNC page`);
  }
  next();
});

// 2. ADD SPECIFIC SYNC ENDPOINTS if they don't exist yet
app.get('/api/sync/meetings', async (req, res) => {
  console.log('\nüîç === SYNC MEETINGS ENDPOINT CALLED ===');
  console.log('üë§ User ID:', req.user?.id);
  
  try {
    const integrations = req.integrations || [];
    console.log('üîç Available integrations:', integrations.map(i => i.provider));
    
    const airtableIntegration = integrations.find(i => i.provider === 'airtable');
    
    if (!airtableIntegration) {
      console.log('‚ùå No Airtable integration found');
      return res.status(400).json({
        success: false,
        message: 'Airtable integration required'
      });
    }
    
    console.log('‚úÖ Airtable integration found:', {
      status: airtableIntegration.status,
      hasApiKey: !!airtableIntegration.apiKey,
      baseId: airtableIntegration.baseId
    });
    
    // Test Airtable connection and fetch meetings
    const meetingsUrl = `https://api.airtable.com/v0/${airtableIntegration.baseId}/Meetings`;
    console.log('üåê Fetching from:', meetingsUrl);
    
    const response = await fetch(meetingsUrl, {
      headers: {
        'Authorization': `Bearer ${airtableIntegration.apiKey}`
      }
    });
    
    if (!response.ok) {
      console.log('‚ùå Airtable fetch failed:', response.status, response.statusText);
      const errorText = await response.text();
      console.log('‚ùå Error details:', errorText);
      
      return res.status(500).json({
        success: false,
        message: 'Failed to fetch meetings from Airtable',
        error: errorText
      });
    }
    
    const data = await response.json();
    console.log('‚úÖ Airtable response received');
    console.log('üìä Total records:', data.records?.length || 0);
    
    // Filter for meetings with status 'complete'
    const completeMeetings = data.records?.filter(record => 
      record.fields['Processing Status'] === 'complete'
    ) || [];
    
    console.log('üìÖ Meetings with status "complete":', completeMeetings.length);
    
    if (completeMeetings.length === 0) {
      console.log('‚ö†Ô∏è No meetings found with Processing Status = "complete"');
      console.log('üí° Available statuses in your data:');
      data.records?.forEach((record, i) => {
        console.log(`   Record ${i + 1}: "${record.fields['Processing Status'] || 'No status field'}"`);
      });
    }
    
    // Transform Airtable records to expected format
    const meetings = completeMeetings.map(record => ({
      id: record.id,
      title: record.fields.Title || 'Untitled Meeting',
      summary: record.fields['Summary Gist'] || record.fields.Summary || '',
      status: record.fields['Processing Status'],
      contact: record.fields.Contact ? {
        id: record.fields.Contact[0],
        name: 'Contact Name' // We'd need to fetch this separately
      } : null,
      created: record.fields.Created || record.createdTime,
      airtableRecordId: record.id
    }));
    
    console.log('üìã Transformed meetings:', meetings);
    
    res.json({
      success: true,
      meetings: meetings,
      totalFound: data.records?.length || 0,
      completeMeetings: completeMeetings.length
    });
    
  } catch (error) {
    console.log('‚ùå SYNC meetings endpoint error:', error.message);
    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: error.message
    });
  }
});

// 3. ADD SYNC STATUS ENDPOINT
app.get('/api/sync/status', async (req, res) => {
  console.log('\nüîç === SYNC STATUS ENDPOINT CALLED ===');
  
  try {
    const integrations = req.integrations || [];
    const airtableIntegration = integrations.find(i => i.provider === 'airtable');
    
    const status = {
      airtableConnected: !!airtableIntegration && airtableIntegration.status === 'connected',
      airtableBaseId: airtableIntegration?.baseId || null,
      hasApiKey: !!airtableIntegration?.apiKey,
      endpoint: '/api/sync/meetings'
    };
    
    console.log('üìä SYNC Status:', status);
    
    res.json(status);
    
  } catch (error) {
    console.log('‚ùå SYNC status error:', error.message);
    res.status(500).json({ success: false, error: error.message });
  }
});

// 4. CHECK WHAT YOUR MANUALLY ADDED RECORD LOOKS like
app.get('/api/debug/airtable-raw', async (req, res) => {
  console.log('\nüîç === RAW AIRTABLE DATA DEBUG ===');
  
  try {
    const integrations = req.integrations || [];
    const airtableIntegration = integrations.find(i => i.provider === 'airtable');
    
    if (!airtableIntegration) {
      return res.json({ error: 'No Airtable integration' });
    }
    
    // Get raw meetings data
    const meetingsUrl = `https://api.airtable.com/v0/${airtableIntegration.baseId}/Meetings`;
    const response = await fetch(meetingsUrl, {
      headers: { 'Authorization': `Bearer ${airtableIntegration.apiKey}` }
    });
    
    const data = await response.json();
    
    console.log('üìä Raw Airtable Data:');
    console.log(JSON.stringify(data, null, 2));
    
    res.json({
      success: true,
      rawData: data,
      recordCount: data.records?.length || 0,
      fields: data.records?.[0]?.fields ? Object.keys(data.records[0].fields) : []
    });
    
  } catch (error) {
    console.log('‚ùå Raw debug error:', error.message);
    res.status(500).json({ error: error.message });
  }
});

console.log('üîß SYNC debug endpoints added:');
console.log('   GET /api/sync/meetings');
console.log('   GET /api/sync/status'); 
console.log('   GET /api/debug/airtable-raw');